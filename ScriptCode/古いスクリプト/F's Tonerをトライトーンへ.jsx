
(function(me){

	//-------------------------------------------------------------------------
	var winObj = ( me instanceof Panel) ? me : new Window("palette", "replaceTonner", [ 0,  0,  250,  150]  ,{resizeable:true, maximizeButton:true, minimizeButton:true});
	//-------------------------------------------------------------------------
	var stCaption = winObj.add("statictext", [  10,   10,   10+ 230,   10+  18], "F's Tonerをトライトーンへ");
	var pnlMode = winObj.add("panel", [  10,   30,   10+ 230,   30+  68], "mode" );
	var rbToDefault = pnlMode.add("radiobutton", [  10,   10,   10+ 210,   10+  24], "トライトーンへ");
	var rbToFs = pnlMode.add("radiobutton", [  10,   34,   10+ 210,   34+  24], "F's Tonerへ");
	var btnExec = winObj.add("button", [  10,  100,   10+ 230,  100+  30], "Exec" );
	rbToDefault.value = true;
	//-------------------------------------------------------------------------	//-------------------------------------------------------------------------	//-------------------------------------------------------------------------	var getKeys = function(prop)	{		var getKeyKeyframeEase = function(ke)		{			var ret = [];			if (ke.length>0){				for (var i=0; i<ke.length; i++){					var p = {};					p.speed = ke[i].speed;					p.influence = ke[i].influence;					ret.push(p);				}			}			return ret;		}		var ret = {};		ret.ok = false;		ret.isArray = false;		if ( prop instanceof Property){					if ( prop.numKeys <=0){				ret.value = prop.value;				ret.ok = true;				ret.isArray = false;			}else{				ret.value = [];				for (var i =1; i<=prop.numKeys;i++){					var p = {};					p.time = prop.keyTime(i);					p.value = prop.keyValue(i);										p.keyInInterpolationType = prop.keyInInterpolationType(i);					p.keyOutInterpolationType = prop.keyOutInterpolationType(i);										p.keyInTemporalEase = getKeyKeyframeEase(prop.keyInTemporalEase(i));					p.keyOutTemporalEase = getKeyKeyframeEase(prop.keyOutTemporalEase(i));					p.keyTemporalAutoBezier = prop.keyTemporalAutoBezier(i);					p.keyTemporalContinuous = prop.keyTemporalContinuous(i);					if (prop.isSpatial === false){						p.keyInSpatialTangent = prop.keyInSpatialTangent(i);						p.keyOutSpatialTangent = prop.keyOutSpatialTangent(i);						p.keySpatialAutoBezier = prop.keySpatialAutoBezier(i);						p.keySpatialContinuous = keySpatialContinuous(i);					}					ret.value.push(p);				}				ret.ok = true;				ret.isArray = true;							}			if (prop.canSetExpression === true){				ret.expression = prop.expression;
				ret.expressionEnabled = prop.expressionEnabled;
			}				}		return ret;	}	//-------------------------------------------------------------------------	var setKeys = function(prop,p)	{		var setKeyKeyframeEase = function(o)		{			var ret = [];			if (o.length>0){				for (var i=0; i<o.length; i++){					var p = new KeyframeEase(o[i].speed, o[i].influence);					ret.push(p);				}			}			return ret;		}		if ( !(prop instanceof Property)) return;		if (p.ok === false) return;		if (prop.numKeys>0){			for ( var i = prop.numKeys; i >= 1; i--) prop.removeKey(i);		}		if (p.isArray === false){			prop.setValue(p.value);		}else{			for ( var i= 0; i<p.value.length; i++){				var o = p.value[i];				prop.setValueAtTime(o.time,o.value); 			}			for ( var i= 0; i<p.value.length; i++){				var o = p.value[i];				if ( o.keyInInterpolationType !== undefined){					try{						prop.setInterpolationTypeAtKey(i,o.keyInInterpolationType, o.keyOutInterpolationType );					}catch(e){						alert("keyInInterpolationType\n"+e);					}				}				if ( o.keyInTemporalEase !== undefined){					try{						prop.setTemporalEaseAtKey(i,setKeyKeyframeEase(o.keyInTemporalEase), setKeyKeyframeEase(o.keyOutTemporalEase) );						alert("2");					}catch(e){						alert("keyInTemporalEase\n"+e);					}				}				if ( o.keyTemporalAutoBezier !== undefined){					try{						prop.setTemporalAutoBezierAtKey(i,o.keyTemporalAutoBezier);						alert("3");					}catch(e){						alert("keyTemporalAutoBezier\n"+e);					}				}				if ( o.keyTemporalAutoBezier !== undefined){					try{						prop.setTemporalContinuousAtKey(i,o.keyTemporalContinuous);						alert("4");					}catch(e){						alert("keyTemporalAutoBezier\n"+e);					}				}				if (prop.isSpatial === false){					if ( o.keyInSpatialTangent !== undefined) {						try{							prop.setSpatialTangentsAtKey(i, o.keyInSpatialTangent,o.keyOutSpatialTangent);						alert("5");						}catch(e){							alert("keyInSpatialTangent\n"+e);						}					}					if ( o.keySpatialAutoBezier !== undefined) {						try{							prop.setTemporalAutoBezierAtKey(i,o.keySpatialAutoBezier);						alert("6");						}catch(e){							alert("keySpatialAutoBezier\n"+e);						}					}					if ( o.keySpatialContinuous !== undefined) {						try{							propsetSpatialContinuousAtKey(i,o.keySpatialContinuous);						alert("7");						}catch(e){							alert("keySpatialContinuous\n"+e);						}					}				}			}		}		if (prop.canSetExpression === true){			prop.expression = p.expression;
			prop.expressionEnabled = p.expressionEnabled;		}
	}	//-------------------------------------------------------------------------	var execToDef =function(prop)	{		if ( prop.matchName.indexOf("F's Tone") !== 0) return false;		var idx = prop.propertyIndex;		var hi		= getKeys( prop.property("F's Toner-0001") );		var md 	= getKeys( prop.property("F's Toner-0002") );		var sd	= getKeys( prop.property("F's Toner-0003") );		var bd	= getKeys( prop.property("Blend w. Original") );		var pp = prop.parentProperty;		prop.remove();		var np = pp.addProperty("ADBE Tritone");		setKeys(np.property("ADBE Tritone-0001"),hi);
		setKeys(np.property("ADBE Tritone-0002"),md);
		setKeys(np.property("ADBE Tritone-0003"),sd);
		setKeys(np.property("ADBE Tritone-0004"),bd);		np.moveTo(idx);		return true;	}	//-------------------------------------------------------------------------	var execToFs =function(prop)	{		if ( prop.matchName !== "ADBE Tritone") return false;				var idx = prop.propertyIndex;		var hi		= getKeys( prop.property("ADBE Tritone-0001") );		var md 	= getKeys( prop.property("ADBE Tritone-0002") );		var sd	= getKeys( prop.property("ADBE Tritone-0003") );		var bd	= getKeys( prop.property("ADBE Tritone-0004") );			var pp = prop.parentProperty;		prop.remove();		var np = pp.addProperty("F's Toner");		setKeys(np.property("F's Toner-0001"),hi);
		setKeys(np.property("F's Toner-0002"),md);
		setKeys(np.property("F's Toner-0003"),sd);
		setKeys(np.property("Blend w. Original"),bd);		np.moveTo(idx);		return true;	}	//-------------------------------------------------------------------------	var exec = function()	{		var findName = function(a,n)		{			var ret = false;			if ( a.length>0){				for (var i=0; i<a.length; i++){					if (a[i].name === n){						ret = true;						break;					}				}			}			return ret;		}		var ac = app.project.activeItem;		if ( !( ac instanceof CompItem)) {			alert("コンポをアクティブにしてください。")			return;		}		var sp = ac.selectedProperties;		if ( sp.length <=0 ) {			alert("プロパティを選んでください")			return;		}				var isToDef = rbToDefault.value;		var targetMatchName = "";		if ( isToDef === true){			targetMatchName = "F's Tone";		}else{			targetMatchName = "ADBE Tritone";		}				var targets = [];		for (var i=0; i<sp.length; i++){			if ( sp[i] instanceof PropertyGroup){				if (sp[i].matchName.indexOf( targetMatchName)===0)					targets.push(sp[i]);			}else if ( sp[i] instanceof Property){				var pp = sp[i].parentProperty;				if ( findName(targets,pp.name) === false){					if (sp[i].matchName.indexOf(targetMatchName)===0)						targets.push(pp);				}			}		}				if (targets.length>0){			var cnt = 0;			if ( isToDef === true){				app.beginUndoGroup("トライトーンへ");			}else{				app.beginUndoGroup("F's Tonerへ");			}			for ( var i=0; i<targets.length; i++){				if (isToDef){					if (execToDef(targets[i]) ) cnt++;				}else{					if (execToFs(targets[i]) ) cnt++;				}			}			app.endUndoGroup();			if (cnt === 0){				alert("処理されませんでした。")			}		}else{			alert("有効なプロパティを選んでください")		}	}	btnExec.onClick = exec;	//-------------------------------------------------------------------------	var resizeWin = function()	{		var b = winObj.bounds;		var w = b[2]-b[0] -20;		var pb = pnlMode.bounds;		pb[2] = b[2] - 10;		pnlMode.bounds = pb;				var bb = btnExec.bounds;		bb[2] = b[2] - 10;		btnExec.bounds = bb;			}	resizeWin();	winObj.onResize = resizeWin;
	//-------------------------------------------------------------------------
	if ( ( me instanceof Panel) == false){
		winObj.center(); 
		winObj.show();
	}
	//-------------------------------------------------------------------------
})(this);